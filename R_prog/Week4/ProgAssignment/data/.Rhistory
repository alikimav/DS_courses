?rpois
set.seed(20)
rnorm(20)
rnorm(20)
set.seed(5)
rnorm(5)
set.seed(5)
rnorm(5)
rnorm(20)
rnorm(20)
set.seed(20)
rnorm(20)
set.seed(5)
rnotm(20)
rnorm(20)
set.seed(5)
rnorm(20)
set.seed(1)
rpois(5,2)
set.seed(1)
x<-rpois(5,2)
class(x)
x<-rpois(5,3)
x
x<-rpois(5,4)
x
x<-rpois(5,2)
x
set.seed(1)
x<-rpois(5,2)
x
set.seed(2)
x<-rpois(5,2)
x
se.seed(1)
set.seed(1)
rpois(5,2)
set.seed(2)
rpois(5,2)
set.seed(10)
rpois(5,2)
set.seed(121)
rpois(5,2)
set.seed(120)
rpois(5,2)
?norm
?pnorm
set.seed(10)
x<-rep(0:1,each=5)
e<-rnorm(10,0,20)
y<-0.5+2*x+e
x
e
y
?rbinom
rbinom(5,2)
rbinom(5,2.0.5)
rbinom(5,2, 0.5)
rbinom(5,2, 1)
rbinom(5,0, 1)
rbinom(5,0, 0.1)
rbinom(5,1, 0.1)
rbinom(5,1, 0.2)
rbinom(5,1, 1)
rbinom(5,3, 1)
rbinom(5,3, 0.1)
getwd
getwd()
setwd('/Users/alikimavromoustaki/Dropbox/it_s_time/R_prog/Week4/ProgAssignment/data/')
getwd()
outcome<-read.csv('outcome-of-care-measures.csv', colClasses = 'character')
head(outcome)
ncol(outcome)
nrow(outcome)
outcome[,11]<-as.numeric(outcome[,11]))
outcome[,11]<-as.numeric(outcome[,11])
head(outcome[,11])
hist(outcome[,11])
outcome
names(outcome)
ncol(outcome)
states<-outcome[,'State']
states
names(outcome)
test<-outcome[,13]
head(test)
test
test<-outcome[,7]
head(test)
head(outcome)
states<-outcome[,'State']
head(states)
outcome$Lower.Mortality.Estimate...Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack
x<-outcome$Lower.Mortality.Estimate...Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack
min(x)
which.min(x)
states[2850]
namehos<-outcome$Hospital.Name
namehos[2850]
x<-c(outcome$Lower.Mortality.Estimate...Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia,outcome$Lower.Mortality.Estimate...Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack,outcome$Lower.Mortality.Estimate...Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure)
dim(x)
size(x)
length(x)
x1<-as.numeric(x)
dim(x1)
length(x1)
head(x1)
nrow(x1)
x<-[c(outcome$Lower.Mortality.Estimate...Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia,outcome$Lower.Mortality.Estimate...Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack,outcome$Lower.Mortality.Estimate...Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure),nrow=nrow(outcome),ncol=3]
x<-matrix(c(outcome$Lower.Mortality.Estimate...Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia,outcome$Lower.Mortality.Estimate...Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack,outcome$Lower.Mortality.Estimate...Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure),nrow=nrow(outcome),ncol=3)
head(x0)
head(x)
x1<-as.numeric(x)
head(x1)
outcome<-read.csv('outcome-of-care-measures.csv', colClasses = 'numeric')
outcome<-read.csv('outcome-of-care-measures.csv', colClasses = 'character')
rm(list=ls())
outcome<-read.csv('outcome-of-care-measures.csv', colClasses = 'character')
states<-outcome[,'State']
# extract vectors of lowest mortality rates
HA<-outcome$Lower.Mortality.Estimate...Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack
HF<-outcome$Lower.Mortality.Estimate...Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure
PN<-outcome$Lower.Mortality.Estimate...Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia
#coerce to numeric
HA<-as.numeric(HA)
HF<-as.numeric(HF)
PN<-as.numeric(PN)
s<-split(states,'TX')
s
head(s)
s<-split(outcome, outcome$State)
s
s<-split(states,'TX')
length(S)
length(s)
s
states
states['TX']
states["TX"]
class(states)
test<-subset(states,'TX')
?subset
test=states[states=='TX']
head(test)
test=states[states=='AL']
unique(test)
unique(states)
rm(list=ls())
source('../best.R')
source('../best.R')
source('../best.R')
best('AL')
source('../best.R')
best('AL')
statevec
clc
source('../best.R')
best('AL')
rm(list=ls())
source('../best.R')
best('AL')
source('../best.R')
best('AL')
# extract vectors of lowest mortality rates
HA<-outcome$Lower.Mortality.Estimate...Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack
HF<-outcome$Lower.Mortality.Estimate...Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure
PN<-outcome$Lower.Mortality.Estimate...Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia
#coerce to numeric
HA<-as.numeric(HA)
HF<-as.numeric(HF)
PN<-as.numeric(PN)
?tapply
tapply(outcome$State=='AL', outcome$Lower.Mortality.Estimate...Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia, min)
tapply(outcome$State=='AL', outcome$Lower.Mortality.Estimate...Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia)
s<-split(outcome, outcome$State)
head(s)
s<-split(outcome, outcome$State)
q<-sapply(s, function(x) mean(x$Lower.Mortality))
rm(list=ls())
outcome<<-read.csv('outcome-of-care-measures.csv', colClasses = 'character')
statevec<-outcome[,'State']
# extract vectors of lowest mortality rates
HA<-outcome$Lower.Mortality.Estimate...Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack
HF<-outcome$Lower.Mortality.Estimate...Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure
PN<-outcome$Lower.Mortality.Estimate...Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia
#coerce to numeric
HA<-as.numeric(HA)
HF<-as.numeric(HF)
PN<-as.numeric(PN)
# matrix of info I care about
info<-matrix(c(statevev,HA,HF,PN),nrow=nrow(outcome),ncol=4)
info<-matrix(c(statevec,HA,HF,PN), nrow=nrow(outcome), ncol=4)
head(info)
names(info)
min(info[,2])
min(info[,2], na.rm=TRUE)
rm(list=ls())
outcome<<-read.csv('outcome-of-care-measures.csv', colClasses = 'character')
statevec<-outcome[,'State']
# extract vectors of lowest mortality rates
HA<-outcome$Lower.Mortality.Estimate...Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack
HF<-outcome$Lower.Mortality.Estimate...Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure
PN<-outcome$Lower.Mortality.Estimate...Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia
# extract vector of Hospital names
HName<-outcome$Hospital.Name
#coerce to numeric
#   HA<-as.numeric(HA)
#   HF<-as.numeric(HF)
#   PN<-as.numeric(PN)
# matrix of info I care about
info<-matrix(c(statevec,HA,HF,PN,HName),nrow=nrow(outcome),ncol=5)
head(info)
tapply(info[,1]=='TX', info[,2], min)
info[,1]=='TX'
rm(list=ls())
outcome<<-read.csv('outcome-of-care-measures.csv', colClasses = 'character')
statevec<-outcome[,'State']
# extract vectors of lowest mortality rates
HA<-outcome$Lower.Mortality.Estimate...Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack
HF<-outcome$Lower.Mortality.Estimate...Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure
PN<-outcome$Lower.Mortality.Estimate...Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia
# extract vector of Hospital names
HName<-outcome$Hospital.Name
# coerce to numeric
HA<-as.numeric(HA)
HF<-as.numeric(HF)
PN<-as.numeric(PN)
# data frame of info I care about
info<-data.frame("State"=statevec, "HA"=HA, "HF"=HF, "PN"=PN, "HName"=HName)
head(info)
info$State
test=tapply(info$HA, info$State, min)
test
test=tapply(info$HA, info$State=="TX", min)
test
test=tapply(info$HA, info$State=="TX", min, na.rm=TRUE)
test
s<-split(info, info$State)
head(S)
head(s)
test<-sapply(s, function(x) min(x$HA))
test
test<-lapply(s, function(x) min(x$HA))
test
test<-lapply(s, function(x) min(x$HA), na.rm=TRUE)
test<-lapply(s, function(x) min(x$HA,na.rm=TRUE)
)
test
s<-split(info,info$State="TX")
s<-split(info,info$State=="TX")
s
statesel<-split(info,info$State=="TX")
head(statesel)
statesel<-info[info$State=="TX"]
statesel<-info[info$State=="TX",]
statesel
statesel<-info[,info$State=="TX"]
rm(list=ls())
outcome<<-read.csv('outcome-of-care-measures.csv', colClasses = 'character')
statevec<-outcome[,'State']
# extract vectors of lowest mortality rates
HA<-outcome$Lower.Mortality.Estimate...Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack
HF<-outcome$Lower.Mortality.Estimate...Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure
PN<-outcome$Lower.Mortality.Estimate...Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia
# extract vector of Hospital names
HName<-outcome$Hospital.Name
# coerce to numeric
HA<-as.numeric(HA)
HF<-as.numeric(HF)
PN<-as.numeric(PN)
# data frame of info I care about
info<-data.frame("State"=statevec, "HA"=HA, "HF"=HF, "PN"=PN, "HName"=HName)
unique(info[,'State'])
f<-unique(info[,'State'])
tapply(info,f,mean)
library(plyr)
install.packages('plyr')
install.packages("plyr")
install.packages('dplyr')
library(dplyr)
df
info
sum(info)
columns(info)
cols(info)
names(info)
exit
quit()
